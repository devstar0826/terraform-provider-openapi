swagger: "2.0"

info:
  description: "This service provider allows the creation of fake 'cdns' and 'lbs' resources"
  version: "1.0.0"
  title: "Dummy Service Provider generated using 'swaggercodegen' that has two resources 'cdns' and 'lbs' which are terraform compliant"
  contact:
    email: "apiteam@serviceprovider.io"
#host: "localhost:8443" If host is not specified, it is assumed to be the same host where the API documentation is being served.
#basePath: ""
tags:
- name: "cdn"
  description: "Operations about cdns"
  externalDocs:
    description: "Find out more about cdn api"
    url: "https://github.com/dikhan/terraform-provider-openapi/tree/master/examples/swaggercodegen"
- name: "lb"
  description: "Operations about lbs"
  externalDocs:
    description: "Find out more about lb api"
    url: "https://github.com/dikhan/terraform-provider-openapi/tree/master/examples/swaggercodegen"
schemes:
- "http"
- "https"

consumes:
- "application/json"
produces:
- "application/json"

security:
  - apikey_auth: []

paths:
  /swagger.json:
    get:
      summary: "Api discovery endpoint"
      operationId: "ApiDiscovery"
      responses:
        200:
          description: "successful operation"
  /version:
    get:
      summary: "Get api version"
      operationId: "getVersion"
      responses:
        200:
          description: "successful operation"

  ######################
  #### CDN Resource ####
  ######################

  /v1/cdns:
    post:
      tags:
      - "cdn"
      summary: "Create cdn"
      operationId: "ContentDeliveryNetworkCreateV1"
      parameters:
      - in: "body"
        name: "body"
        description: "Created CDN"
        required: true
        schema:
          $ref: "#/definitions/ContentDeliveryNetworkV1"
      - in: "header"
        x-terraform-header: x_request_id
        name: "X-Request-ID"
        type: "string"
        required: true
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/Error"
      #security: For the sake of the example, this POST operation will use the global security schemes
      #  - apikey_auth: []
  /v1/cdns/{id}:
    get:
      tags:
      - "cdn"
      summary: "Get cdn by id"
      description: ""
      operationId: "ContentDeliveryNetworkGetV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The cdn id that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        400:
          description: "Invalid cdn id supplied"
        404:
          description: "CDN not found"
      security:
        - apikey_auth: []
    put:
      tags:
      - "cdn"
      summary: "Updated cdn"
      operationId: "ContentDeliveryNetworkUpdateV1"
      parameters:
      - name: "id"
        in: "path"
        description: "cdn that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated cdn object"
        required: true
        schema:
          $ref: "#/definitions/ContentDeliveryNetworkV1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        400:
          description: "Invalid cdn id supplied"
        404:
          description: "CDN not found"
      security:
        - apikey_auth: []
    delete:
      tags:
      - "cdn"
      summary: "Delete cdn"
      operationId: "ContentDeliveryNetworkDeleteV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The cdn that needs to be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation, no content is returned"
        400:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
      security:
        - apikey_auth: []

  ######################
  ##### LB Resource ####
  ######################

  /v1/lbs:
    post:
      tags:
      - "lb"
      summary: "Create lb v1"
      operationId: "LBCreateV1"
      parameters:
      - in: "body"
        name: "body"
        description: "LB v1 payload object to be posted as part of the POST request"
        required: true
        schema:
          $ref: "#/definitions/LBV1"
      responses:
        202:
          description: "this operation is asynchronous, to check the status of the deployment call GET operation and check the status field returned in the payload"
          schema:
            $ref: "#/definitions/LBV1"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/Error"
  /v1/lbs/{id}:
    get:
      tags:
      - "lb"
      summary: "Get lb v1 by id"
      description: ""
      operationId: "LBGetV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The lb v1 id that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LBV1"
        400:
          description: "Invalid lb id supplied"
        404:
          description: "LB not found"
    put:
      tags:
      - "lb"
      summary: "Updated cdn"
      operationId: "LBUpdateV1"
      parameters:
      - name: "id"
        in: "path"
        description: "lb v1 that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated cdn object"
        required: true
        schema:
          $ref: "#/definitions/LBV1"
      responses:
        202:
          description: "this operation is asynchronous, to check the status of the deployment call GET operation and check the status field returned in the payload"
          schema:
            $ref: "#/definitions/LBV1"
        400:
          description: "Invalid lb id supplied"
        404:
          description: "LB v1 not found"
    delete:
      tags:
      - "lb"
      summary: "Delete lb v1"
      operationId: "LBDeleteV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The lb v1 that needs to be deleted"
        required: true
        type: "string"
      responses:
        202:
          description: "this operation is asynchronous, to check the status of the deployment call GET operation and check the status field returned in the payload"
        400:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

securityDefinitions:
  apikey_auth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  ContentDeliveryNetworkV1:
    type: "object"
    required:
      - label
      - ips
      - hostnames
    properties:
      id:
        type: "string"
        readOnly: true # This property will not be considered when creating a new resource, however, it is expected to
                       # to be returned from the api, and will be saved as computed value in the terraform state file
      label:
        type: "string"
        x-terraform-immutable: true
      ips:
        type: "array"
        x-terraform-force-new: true # when this value changes terraform will force the creation of a new resource
        items:
          type: "string"
      hostnames:
        type: "array"
        items:
          type: "string"
      example_int:
        type: integer
      example_number:
        type: number
      example_boolean:
        type: boolean

  LBV1:
    type: "object"
    required:
      - name
      - backends
    properties:
      id:
        type: "string"
        readOnly: true # This property will not be considered when creating a new resource, however, it is expected to
                       # to be returned from the api, and will be saved as computed value in the terraform state file
      name:
        type: "string"
      backends:
        type: "array"
        x-terraform-force-new: true # when this value changes terraform will force the creation of a new resource
        items:
          type: "string"

  # Schema for error response body
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string

# Descriptions of common responses
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
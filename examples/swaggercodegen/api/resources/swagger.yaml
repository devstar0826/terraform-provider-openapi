swagger: "2.0"

info:
  description: "This service provider allows the creation of fake 'cdns' and 'lbs' resources"
  version: "1.0.0"
  title: "Dummy Service Provider generated using 'swaggercodegen' that has two resources 'cdns' and 'lbs' which are terraform compliant"
  contact:
    email: "apiteam@serviceprovider.io"
host: "localhost:8443" # If host is not specified, it is assumed to be the same host where the API documentation is being served.
#basePath: ""
tags:
- name: "cdn"
  description: "Operations about cdns"
  externalDocs:
    description: "Find out more about cdn api"
    url: "https://github.com/dikhan/terraform-provider-openapi/tree/master/examples/swaggercodegen"
schemes:
- "http"
- "https"

consumes:
- "application/json"
produces:
- "application/json"

security:
  - apikey_auth: []

paths:
  /swagger.json:
    get:
      summary: "Api discovery endpoint"
      operationId: "ApiDiscovery"
      responses:
        200:
          description: "successful operation"
  /version:
    get:
      summary: "Get api version"
      operationId: "getVersion"
      responses:
        200:
          description: "successful operation"

  ######################
  #### CDN Resource ####
  ######################

  /v1/cdns:
    post:
      x-terraform-resource-name: "cdn"
      tags:
      - "cdn"
      summary: "Create cdn"
      operationId: "ContentDeliveryNetworkCreateV1"
      parameters:
      - in: "body"
        name: "body"
        description: "Created CDN"
        required: true
        schema:
          $ref: "#/definitions/ContentDeliveryNetworkV1"
      - in: "header"
        x-terraform-header: x_request_id
        name: "X-Request-ID"
        type: "string"
        required: true
      x-terraform-resource-timeout: "30s"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/Error"
      #security: For the sake of the example, this POST operation will use the global security schemes
      #  - apikey_auth: []
  /v1/cdns/{id}:
    get:
      tags:
      - "cdn"
      summary: "Get cdn by id"
      description: ""
      operationId: "ContentDeliveryNetworkGetV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The cdn id that needs to be fetched."
        required: true
        type: "string"
      #x-terraform-resource-timeout: "30s" If a given operation does not have the 'x-terraform-resource-timeout' extension; the resource operation timeout will default to 10m (10 minutes)
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        400:
          description: "Invalid cdn id supplied"
        404:
          description: "CDN not found"
      security:
        - apikey_auth: []
    put:
      tags:
      - "cdn"
      summary: "Updated cdn"
      operationId: "ContentDeliveryNetworkUpdateV1"
      parameters:
      - name: "id"
        in: "path"
        description: "cdn that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated cdn object"
        required: true
        schema:
          $ref: "#/definitions/ContentDeliveryNetworkV1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentDeliveryNetworkV1"
        400:
          description: "Invalid cdn id supplied"
        404:
          description: "CDN not found"
      security:
        - apikey_auth: []
    delete:
      tags:
      - "cdn"
      summary: "Delete cdn"
      operationId: "ContentDeliveryNetworkDeleteV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The cdn that needs to be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation, no content is returned"
        400:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
      security:
        - apikey_auth: []

  ######################
  ##### LB Resource ####
  ######################

  /v1/lbs:
    post:
      tags:
      - "lb"
      summary: "Create lb v1"
      operationId: "LBCreateV1"
      parameters:
      - in: "body"
        name: "body"
        description: "LB v1 payload object to be posted as part of the POST request"
        required: true
        schema:
          $ref: "#/definitions/LBV1"
      x-terraform-resource-timeout: "2s"
      responses:
        202: # Accepted
          x-terraform-resource-poll-enabled: true # [type (bool)] - this flags the response as trully async. Some resources might be async too but may require manual intervention from operators to complete the creation workflow. This flag will be used by the OpenAPI Service provider to detect whether the polling mechanism should be used or not. The flags below will only be applicable if this one is present with value 'true'
          x-terraform-resource-poll-completed-statuses: "deployed" # [type (string)] - Comma separated values with the states that will considered this resource creation done/completed
          x-terraform-resource-poll-pending-statuses: "deploy_pending,deploy_in_progress" # [type (string)] - Comma separated values with the states that are "allowed" and will continue trying
          description: "this operation is asynchronous, to check the status of the deployment call GET operation and check the status field returned in the payload"
          schema:
            $ref: "#/definitions/LBV1"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/Error"
  /v1/lbs/{id}:
    get:
      tags:
      - "lb"
      summary: "Get lb v1 by id"
      description: ""
      operationId: "LBGetV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The lb v1 id that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LBV1"
        400:
          description: "Invalid lb id supplied"
        404:
          description: "LB not found"
    put:
      tags:
      - "lb"
      summary: "Updated cdn"
      operationId: "LBUpdateV1"
      parameters:
      - name: "id"
        in: "path"
        description: "lb v1 that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated cdn object"
        required: true
        schema:
          $ref: "#/definitions/LBV1"
      #      x-terraform-resource-timeout: "30s" If a given operation does not have the 'x-terraform-resource-timeout' extension; the resource operation timeout will default to 10m (10 minutes)
      responses:
        202: # Accepted
          x-terraform-resource-poll-enabled: true
          x-terraform-resource-poll-completed-statuses: "deployed"
          x-terraform-resource-poll-pending-statuses: "deploy_pending,deploy_in_progress"
          schema:
            $ref: "#/definitions/LBV1"
          description: "this operation is asynchronous, to check the status of the deployment call GET operation and check the status field returned in the payload"
        400:
          description: "Invalid lb id supplied"
        404:
          description: "LB v1 not found"
    delete:
      tags:
      - "lb"
      summary: "Delete lb v1"
      operationId: "LBDeleteV1"
      parameters:
      - name: "id"
        in: "path"
        description: "The lb v1 that needs to be deleted"
        required: true
        type: "string"
      responses:
        202:
          description: "LB v1 deletion"
          #x-terraform-resource-poll-enabled: true
          #x-terraform-resource-poll-completed-statuses: "destroyed-crazy-nusts!!!" #This extension is not needed in DELETE operations and will be ignored if present. This is due to the fact that when the resource is destroyed, it is expected that http GET calls made by the polling mechanism will get a NotFound response status code back wit no payload whatsoever. And the OpenAPI Terraform provider will internally know how to handle this particular cases without this extension being present.
          x-terraform-resource-poll-pending-statuses: "delete_pending,delete_in_progress"
        400:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

securityDefinitions:
  apikey_auth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  ContentDeliveryNetworkV1:
    type: "object"
    required:
      - label
      - ips
      - hostnames
    properties:
      id:
        type: "string"
        readOnly: true # This property will not be considered when creating a new resource, however, it is expected to
                       # to be returned from the api, and will be saved as computed value in the terraform state file
      label:
        type: "string"
        x-terraform-immutable: true
      ips:
        type: "array"
        x-terraform-force-new: true # when this value changes terraform will force the creation of a new resource
        items:
          type: "string"
      hostnames:
        type: "array"
        items:
          type: "string"
      exampleInt: # this name is not terraform name compliant; the provider will do a translation on the fly to make it terraform name compliant - the result will be example_int
        type: integer
      exampleNumber:
        type: number
        x-terraform-field-name: betterExampleNumberFieldName  # overriding exampleNumber with a different name 'betterExampleNumberFieldName'; the preferred name is not terraform compliant either so the provider will perform the name conversion automatically when translating the name into the provider resource configuration and when saving the field into the state file
      example_boolean:
        type: boolean

  LBV1:
    type: "object"
    required:
    - name
    - backends
    properties:
      id:
        type: "string"
        readOnly: true # This property will not be considered when creating a new resource, however, it is expected to
        # to be returned from the api, and will be saved as computed value in the terraform state file
      name:
        type: "string"
      backends:
        type: "array"
        items:
          type: "string"
      status:
        x-terraform-field-status: true # identifies the field that should be used as status for async operations. This is handy when the field name is not status but some other name the service provider might have chosen and enables the provider to identify the field as the status field that will be used to track progress for the async operations
        description: lb resource status
        type: string
        readOnly: true
        enum: # this is just for documentation purposes and to let the consumer know what statues should be expected
        - deploy_pending
        - deploy_in_progress
        - deploy_failed
        - deployed
        - delete_pending
        - delete_in_progress
        - delete_failed
        - deleted
      timeToProcess: # time that the resource will take to be processed in seconds
        type: integer
        default: 60 # it will take two minute to process the resource operation (POST/PUT/READ/DELETE)
      simulate_failure: # allows user to set it to true and force an error on the API when the given operation (POST/PUT/READ/DELETE) is being performed
        type: boolean

  # Schema for error response body
  Error:
    type: object
    required:
    - code
    - message
    properties:
      code:
        type: string
      message:
        type: string

# Descriptions of common responses
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"